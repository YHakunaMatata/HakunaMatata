package com.yahoo.hakunamatata.dao;

import com.yahoo.hakunamatata.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POST.
 */
public class Post {

    private Long internalId;
    private String id;
    private java.util.Date created_time;
    private String message;
    private String type;
    private String picture;
    private String full_picture;
    private String link;
    private Long postUserIdMapping;
    private Long postLikeIdMapping;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PostDao myDao;

    private User user;
    private Long user__resolvedKey;

    private Like like;
    private Long like__resolvedKey;


    public Post() {
    }

    public Post(Long internalId) {
        this.internalId = internalId;
    }

    public Post(Long internalId, String id, java.util.Date created_time, String message, String type, String picture, String full_picture, String link, Long postUserIdMapping, Long postLikeIdMapping) {
        this.internalId = internalId;
        this.id = id;
        this.created_time = created_time;
        this.message = message;
        this.type = type;
        this.picture = picture;
        this.full_picture = full_picture;
        this.link = link;
        this.postUserIdMapping = postUserIdMapping;
        this.postLikeIdMapping = postLikeIdMapping;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPostDao() : null;
    }

    public Long getInternalId() {
        return internalId;
    }

    public void setInternalId(Long internalId) {
        this.internalId = internalId;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public java.util.Date getCreated_time() {
        return created_time;
    }

    public void setCreated_time(java.util.Date created_time) {
        this.created_time = created_time;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getPicture() {
        return picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public String getFull_picture() {
        return full_picture;
    }

    public void setFull_picture(String full_picture) {
        this.full_picture = full_picture;
    }

    public String getLink() {
        return link;
    }

    public void setLink(String link) {
        this.link = link;
    }

    public Long getPostUserIdMapping() {
        return postUserIdMapping;
    }

    public void setPostUserIdMapping(Long postUserIdMapping) {
        this.postUserIdMapping = postUserIdMapping;
    }

    public Long getPostLikeIdMapping() {
        return postLikeIdMapping;
    }

    public void setPostLikeIdMapping(Long postLikeIdMapping) {
        this.postLikeIdMapping = postLikeIdMapping;
    }

    /** To-one relationship, resolved on first access. */
    public User getUser() {
        Long __key = this.postUserIdMapping;
        if (user__resolvedKey == null || !user__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User userNew = targetDao.load(__key);
            synchronized (this) {
                user = userNew;
            	user__resolvedKey = __key;
            }
        }
        return user;
    }

    public void setUser(User user) {
        synchronized (this) {
            this.user = user;
            postUserIdMapping = user == null ? null : user.getInternalId();
            user__resolvedKey = postUserIdMapping;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Like getLike() {
        Long __key = this.postLikeIdMapping;
        if (like__resolvedKey == null || !like__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            LikeDao targetDao = daoSession.getLikeDao();
            Like likeNew = targetDao.load(__key);
            synchronized (this) {
                like = likeNew;
            	like__resolvedKey = __key;
            }
        }
        return like;
    }

    public void setLike(Like like) {
        synchronized (this) {
            this.like = like;
            postLikeIdMapping = like == null ? null : like.getInternalId();
            like__resolvedKey = postLikeIdMapping;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
