package com.yahoo.hakunamatata.dao;

import com.yahoo.hakunamatata.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER.
 */
public class User {

    private Long internalId;
    private String id;
    private String name;
    private Long userPictureIdMapping;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private Picture picture;
    private Long picture__resolvedKey;


    public User() {
    }

    public User(Long internalId) {
        this.internalId = internalId;
    }

    public User(Long internalId, String id, String name, Long userPictureIdMapping) {
        this.internalId = internalId;
        this.id = id;
        this.name = name;
        this.userPictureIdMapping = userPictureIdMapping;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public Long getInternalId() {
        return internalId;
    }

    public void setInternalId(Long internalId) {
        this.internalId = internalId;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Long getUserPictureIdMapping() {
        return userPictureIdMapping;
    }

    public void setUserPictureIdMapping(Long userPictureIdMapping) {
        this.userPictureIdMapping = userPictureIdMapping;
    }

    /** To-one relationship, resolved on first access. */
    public Picture getPicture() {
        Long __key = this.userPictureIdMapping;
        if (picture__resolvedKey == null || !picture__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PictureDao targetDao = daoSession.getPictureDao();
            Picture pictureNew = targetDao.load(__key);
            synchronized (this) {
                picture = pictureNew;
            	picture__resolvedKey = __key;
            }
        }
        return picture;
    }

    public void setPicture(Picture picture) {
        synchronized (this) {
            this.picture = picture;
            userPictureIdMapping = picture == null ? null : picture.getInternalId();
            picture__resolvedKey = userPictureIdMapping;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
